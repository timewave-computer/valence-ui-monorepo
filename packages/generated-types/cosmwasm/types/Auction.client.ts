/**
 * This file was automatically generated by @cosmwasm/ts-codegen@1.11.1.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import {
  CosmWasmClient,
  SigningCosmWasmClient,
  ExecuteResult,
} from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import {
  Decimal,
  Pair,
  InstantiateMsg,
  AuctionStrategy,
  ChainHaltConfig,
  PriceFreshnessStrategy,
  ExecuteMsg,
  Addr,
  AdminMsgs,
  NewAuctionParams,
  QueryMsg,
  Uint128,
  Timestamp,
  Uint64,
  ActiveAuctionStatus,
  ActiveAuction,
  BlockInfo,
  AuctionConfig,
  GetFundsAmountResponse,
  GetMmResponse,
  GetPriceResponse,
} from "./Auction.types";
export interface AuctionReadOnlyInterface {
  contractAddress: string;
  getFundsAmount: ({
    addr,
  }: {
    addr: string;
  }) => Promise<GetFundsAmountResponse>;
}
export class AuctionQueryClient implements AuctionReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getFundsAmount = this.getFundsAmount.bind(this);
  }
  getFundsAmount = async ({
    addr,
  }: {
    addr: string;
  }): Promise<GetFundsAmountResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_funds_amount: {
        addr,
      },
    });
  };
}
export interface AuctionInterface extends AuctionReadOnlyInterface {
  contractAddress: string;
  sender: string;
  auctionFundsManager: (
    {
      sender,
    }: {
      sender: Addr;
    },
    fee?: number | StdFee | "auto",
    memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>;
  auctionFunds: (
    fee?: number | StdFee | "auto",
    memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>;
  withdrawFundsManager: (
    {
      sender,
    }: {
      sender: Addr;
    },
    fee?: number | StdFee | "auto",
    memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>;
  withdrawFunds: (
    fee?: number | StdFee | "auto",
    memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>;
  bid: (
    fee?: number | StdFee | "auto",
    memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>;
  finishAuction: (
    {
      limit,
    }: {
      limit: number;
    },
    fee?: number | StdFee | "auto",
    memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>;
  cleanAfterAuction: (
    fee?: number | StdFee | "auto",
    memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>;
  admin: (
    adminMsgs: AdminMsgs,
    fee?: number | StdFee | "auto",
    memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>;
}
export class AuctionClient
  extends AuctionQueryClient
  implements AuctionInterface
{
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(
    client: SigningCosmWasmClient,
    sender: string,
    contractAddress: string
  ) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.auctionFundsManager = this.auctionFundsManager.bind(this);
    this.auctionFunds = this.auctionFunds.bind(this);
    this.withdrawFundsManager = this.withdrawFundsManager.bind(this);
    this.withdrawFunds = this.withdrawFunds.bind(this);
    this.bid = this.bid.bind(this);
    this.finishAuction = this.finishAuction.bind(this);
    this.cleanAfterAuction = this.cleanAfterAuction.bind(this);
    this.admin = this.admin.bind(this);
  }
  auctionFundsManager = async (
    {
      sender,
    }: {
      sender: Addr;
    },
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        auction_funds_manager: {
          sender,
        },
      },
      fee,
      memo,
      _funds
    );
  };
  auctionFunds = async (
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        auction_funds: {},
      },
      fee,
      memo,
      _funds
    );
  };
  withdrawFundsManager = async (
    {
      sender,
    }: {
      sender: Addr;
    },
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        withdraw_funds_manager: {
          sender,
        },
      },
      fee,
      memo,
      _funds
    );
  };
  withdrawFunds = async (
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        withdraw_funds: {},
      },
      fee,
      memo,
      _funds
    );
  };
  bid = async (
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        bid: {},
      },
      fee,
      memo,
      _funds
    );
  };
  finishAuction = async (
    {
      limit,
    }: {
      limit: number;
    },
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        finish_auction: {
          limit,
        },
      },
      fee,
      memo,
      _funds
    );
  };
  cleanAfterAuction = async (
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        clean_after_auction: {},
      },
      fee,
      memo,
      _funds
    );
  };
  admin = async (
    adminMsgs: AdminMsgs,
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        admin: adminMsgs,
      },
      fee,
      memo,
      _funds
    );
  };
}

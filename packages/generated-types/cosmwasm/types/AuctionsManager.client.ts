/**
 * This file was automatically generated by @cosmwasm/ts-codegen@1.11.1.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import {
  CosmWasmClient,
  SigningCosmWasmClient,
  ExecuteResult,
} from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import {
  Uint128,
  InstantiateMsg,
  MinAmount,
  ExecuteMsg,
  Pair,
  AdminMsgs,
  Decimal,
  MigrateMsg,
  Expiration,
  Timestamp,
  Uint64,
  ServerMsgs,
  AuctionStrategy,
  ChainHaltConfig,
  PriceFreshnessStrategy,
  NewAuctionParams,
  QueryMsg,
  Addr,
  AuctionConfig,
  ArrayOfTupleOfPairAndAddr,
  GetPriceResponse,
} from "./AuctionsManager.types";
export interface AuctionsManagerReadOnlyInterface {
  contractAddress: string;
  getPairs: ({
    limit,
    startAfter,
  }: {
    limit?: number;
    startAfter?: Pair;
  }) => Promise<ArrayOfTupleOfPairAndAddr>;
  getPrice: ({ pair }: { pair: Pair }) => Promise<GetPriceResponse>;
  getConfig: ({ pair }: { pair: Pair }) => Promise<AuctionConfig>;
  getPairAddr: ({ pair }: { pair: Pair }) => Promise<Addr>;
  getMinLimit: ({ denom }: { denom: string }) => Promise<MinAmount>;
}
export class AuctionsManagerQueryClient
  implements AuctionsManagerReadOnlyInterface
{
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getPairs = this.getPairs.bind(this);
    this.getPrice = this.getPrice.bind(this);
    this.getConfig = this.getConfig.bind(this);
    this.getPairAddr = this.getPairAddr.bind(this);
    this.getMinLimit = this.getMinLimit.bind(this);
  }
  getPairs = async ({
    limit,
    startAfter,
  }: {
    limit?: number;
    startAfter?: Pair;
  }): Promise<ArrayOfTupleOfPairAndAddr> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_pairs: {
        limit,
        start_after: startAfter,
      },
    });
  };
  getPrice = async ({ pair }: { pair: Pair }): Promise<GetPriceResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_price: {
        pair,
      },
    });
  };
  getConfig = async ({ pair }: { pair: Pair }): Promise<AuctionConfig> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_config: {
        pair,
      },
    });
  };
  getPairAddr = async ({ pair }: { pair: Pair }): Promise<Addr> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_pair_addr: {
        pair,
      },
    });
  };
  getMinLimit = async ({ denom }: { denom: string }): Promise<MinAmount> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_min_limit: {
        denom,
      },
    });
  };
}
export interface AuctionsManagerInterface
  extends AuctionsManagerReadOnlyInterface {
  contractAddress: string;
  sender: string;
  auctionFunds: (
    {
      pair,
    }: {
      pair: Pair;
    },
    fee?: number | StdFee | "auto",
    memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>;
  withdrawFunds: (
    {
      pair,
    }: {
      pair: Pair;
    },
    fee?: number | StdFee | "auto",
    memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>;
  finishAuction: (
    {
      limit,
      pair,
    }: {
      limit: number;
      pair: Pair;
    },
    fee?: number | StdFee | "auto",
    memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>;
  approveAdminChange: (
    fee?: number | StdFee | "auto",
    memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>;
  admin: (
    adminMsgs: AdminMsgs,
    fee?: number | StdFee | "auto",
    memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>;
  server: (
    serverMsgs: ServerMsgs,
    fee?: number | StdFee | "auto",
    memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>;
}
export class AuctionsManagerClient
  extends AuctionsManagerQueryClient
  implements AuctionsManagerInterface
{
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(
    client: SigningCosmWasmClient,
    sender: string,
    contractAddress: string
  ) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.auctionFunds = this.auctionFunds.bind(this);
    this.withdrawFunds = this.withdrawFunds.bind(this);
    this.finishAuction = this.finishAuction.bind(this);
    this.approveAdminChange = this.approveAdminChange.bind(this);
    this.admin = this.admin.bind(this);
    this.server = this.server.bind(this);
  }
  auctionFunds = async (
    {
      pair,
    }: {
      pair: Pair;
    },
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        auction_funds: {
          pair,
        },
      },
      fee,
      memo,
      _funds
    );
  };
  withdrawFunds = async (
    {
      pair,
    }: {
      pair: Pair;
    },
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        withdraw_funds: {
          pair,
        },
      },
      fee,
      memo,
      _funds
    );
  };
  finishAuction = async (
    {
      limit,
      pair,
    }: {
      limit: number;
      pair: Pair;
    },
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        finish_auction: {
          limit,
          pair,
        },
      },
      fee,
      memo,
      _funds
    );
  };
  approveAdminChange = async (
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        approve_admin_change: {},
      },
      fee,
      memo,
      _funds
    );
  };
  admin = async (
    adminMsgs: AdminMsgs,
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        admin: adminMsgs,
      },
      fee,
      memo,
      _funds
    );
  };
  server = async (
    serverMsgs: ServerMsgs,
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        server: serverMsgs,
      },
      fee,
      memo,
      _funds
    );
  };
}

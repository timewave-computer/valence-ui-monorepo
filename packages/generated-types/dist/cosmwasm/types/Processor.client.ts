/**
 * This file was automatically generated by @cosmwasm/ts-codegen@1.11.1.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { CosmWasmClient } from "@cosmjs/cosmwasm-stargate";
import {
  InstantiateMsg,
  PolytoneContracts,
  QueryMsg,
  Priority,
  ProcessorDomain,
  Addr,
  PolytoneProxyState,
  State,
  Config,
  Polytone,
  ProcessorMessage,
  Binary,
  Expiration,
  Timestamp,
  Uint64,
  Subroutine,
  LibraryAccountType,
  Domain,
  ParamRestriction,
  MessageType,
  Duration,
  RetryTimes,
  ArrayOfMessageBatch,
  MessageBatch,
  CurrentRetry,
  AtomicSubroutine,
  AtomicFunction,
  MessageDetails,
  Message,
  RetryLogic,
  NonAtomicSubroutine,
  NonAtomicFunction,
  FunctionCallback,
  Boolean,
  ExecutionResult,
  PolytoneCallbackState,
  PendingPolytoneCallbackInfo,
  ArrayOfPendingPolytoneCallbackInfo,
} from "./Processor.types";
export interface ProcessorReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<Config>;
  getQueue: ({
    from,
    priority,
    to,
  }: {
    from?: number;
    priority: Priority;
    to?: number;
  }) => Promise<ArrayOfMessageBatch>;
  isQueueEmpty: () => Promise<Boolean>;
  pendingPolytoneCallbacks: ({
    limit,
    startAfter,
  }: {
    limit?: number;
    startAfter?: number;
  }) => Promise<ArrayOfPendingPolytoneCallbackInfo>;
  pendingPolytoneCallback: ({
    executionId,
  }: {
    executionId: number;
  }) => Promise<PendingPolytoneCallbackInfo>;
}
export class ProcessorQueryClient implements ProcessorReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.getQueue = this.getQueue.bind(this);
    this.isQueueEmpty = this.isQueueEmpty.bind(this);
    this.pendingPolytoneCallbacks = this.pendingPolytoneCallbacks.bind(this);
    this.pendingPolytoneCallback = this.pendingPolytoneCallback.bind(this);
  }
  config = async (): Promise<Config> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {},
    });
  };
  getQueue = async ({
    from,
    priority,
    to,
  }: {
    from?: number;
    priority: Priority;
    to?: number;
  }): Promise<ArrayOfMessageBatch> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_queue: {
        from,
        priority,
        to,
      },
    });
  };
  isQueueEmpty = async (): Promise<Boolean> => {
    return this.client.queryContractSmart(this.contractAddress, {
      is_queue_empty: {},
    });
  };
  pendingPolytoneCallbacks = async ({
    limit,
    startAfter,
  }: {
    limit?: number;
    startAfter?: number;
  }): Promise<ArrayOfPendingPolytoneCallbackInfo> => {
    return this.client.queryContractSmart(this.contractAddress, {
      pending_polytone_callbacks: {
        limit,
        start_after: startAfter,
      },
    });
  };
  pendingPolytoneCallback = async ({
    executionId,
  }: {
    executionId: number;
  }): Promise<PendingPolytoneCallbackInfo> => {
    return this.client.queryContractSmart(this.contractAddress, {
      pending_polytone_callback: {
        execution_id: executionId,
      },
    });
  };
}

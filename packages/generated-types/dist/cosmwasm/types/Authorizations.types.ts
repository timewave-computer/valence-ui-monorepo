/**
 * This file was automatically generated by @cosmwasm/ts-codegen@1.11.1.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

export interface InstantiateMsg {
  admin: string;
}
export type QueryMsg =
  | {
      sub_owners: {};
    }
  | {
      processor: {};
    }
  | {
      external_domains: {
        limit?: number | null;
        start_after?: string | null;
      };
    }
  | {
      external_domain: {
        name: string;
      };
    }
  | {
      authorizations: {
        limit?: number | null;
        start_after?: string | null;
      };
    }
  | {
      processor_callbacks: {
        limit?: number | null;
        start_after?: number | null;
      };
    }
  | {
      processor_callback: {
        execution_id: number;
      };
    }
  | {
      ism_specifier: IsmSpecifierQueryMsg;
    }
  | {
      ownership: {};
    };
export type IsmSpecifierQueryMsg = {
  interchain_security_module: [];
};
export type Expiration =
  | {
      at_height: number;
    }
  | {
      at_time: Timestamp;
    }
  | {
      never: {};
    };
export type Timestamp = Uint64;
export type Uint64 = string;
export type AuthorizationMode =
  | "permissionless"
  | {
      permissioned: PermissionType;
    };
export type PermissionType =
  | {
      with_call_limit: [Addr, Uint128][];
    }
  | {
      without_call_limit: Addr[];
    };
export type Addr = string;
export type Uint128 = string;
export type Priority = "medium" | "high";
export type AuthorizationState = "enabled" | "disabled";
export type Subroutine =
  | {
      atomic: AtomicSubroutine;
    }
  | {
      non_atomic: NonAtomicSubroutine;
    };
export type LibraryAccountType =
  | {
      "|library_account_addr|": string;
    }
  | {
      "|account_id|": number;
    }
  | {
      "|library_id|": number;
    };
export type Domain =
  | "main"
  | {
      external: string;
    };
export type ParamRestriction =
  | {
      must_be_included: string[];
    }
  | {
      cannot_be_included: string[];
    }
  | {
      must_be_value: [string[], Binary];
    }
  | {
      must_be_bytes: Binary;
    };
export type Binary = string;
export type MessageType =
  | ("cosmwasm_execute_msg" | "cosmwasm_migrate_msg" | "evm_raw_call")
  | {
      evm_call: [EncoderInfo, string];
    };
export type Duration =
  | {
      height: number;
    }
  | {
      time: number;
    };
export type RetryTimes =
  | "indefinitely"
  | {
      amount: number;
    };
export type ArrayOfAuthorization = Authorization[];
export interface Authorization {
  expiration: Expiration;
  label: string;
  max_concurrent_executions: number;
  mode: AuthorizationMode;
  not_before: Expiration;
  priority: Priority;
  state: AuthorizationState;
  subroutine: Subroutine;
}
export interface AtomicSubroutine {
  expiration_time?: number | null;
  functions: AtomicFunction[];
  retry_logic?: RetryLogic | null;
}
export interface AtomicFunction {
  contract_address: LibraryAccountType;
  domain: Domain;
  message_details: MessageDetails;
}
export interface MessageDetails {
  message: Message;
  message_type: MessageType;
}
export interface Message {
  name: string;
  params_restrictions?: ParamRestriction[] | null;
}
export interface EncoderInfo {
  broker_address: string;
  encoder_version: string;
}
export interface RetryLogic {
  interval: Duration;
  times: RetryTimes;
}
export interface NonAtomicSubroutine {
  expiration_time?: number | null;
  functions: NonAtomicFunction[];
}
export interface NonAtomicFunction {
  callback_confirmation?: FunctionCallback | null;
  contract_address: LibraryAccountType;
  domain: Domain;
  message_details: MessageDetails;
  retry_logic?: RetryLogic | null;
}
export interface FunctionCallback {
  callback_message: Binary;
  contract_address: Addr;
}
export type ExecutionEnvironment =
  | {
      cosmwasm: CosmwasmBridge;
    }
  | {
      evm: [Encoder, EvmBridge];
    };
export type CosmwasmBridge = {
  polytone: PolytoneConnectors;
};
export type PolytoneProxyState =
  | ("timed_out" | "pending_response" | "created")
  | {
      unexpected_error: string;
    };
export type EvmBridge = {
  hyperlane: HyperlaneConnector;
};
export interface ExternalDomain {
  execution_environment: ExecutionEnvironment;
  name: string;
  processor: string;
}
export interface PolytoneConnectors {
  polytone_note: PolytoneNote;
  polytone_proxy: Addr;
}
export interface PolytoneNote {
  address: Addr;
  state: PolytoneProxyState;
  timeout_seconds: number;
}
export interface Encoder {
  broker_address: Addr;
  encoder_version: string;
}
export interface HyperlaneConnector {
  domain_id: number;
  mailbox: Addr;
}
export type ArrayOfExternalDomain = ExternalDomain[];
export interface InterchainSecurityModuleResponse {
  ism?: Addr | null;
}
export interface OwnershipForString {
  owner?: string | null;
  pending_expiry?: Expiration | null;
  pending_owner?: string | null;
}
export type ExecutionResult =
  | ("in_process" | "success" | "removed_by_owner")
  | {
      rejected: string;
    }
  | {
      partially_executed: [number, string];
    }
  | {
      timeout: boolean;
    }
  | {
      expired: number;
    }
  | {
      unexpected_error: string;
    };
export type OperationInitiator =
  | "owner"
  | {
      user: Addr;
    };
export type ProcessorMessage =
  | {
      cosmwasm_execute_msg: {
        msg: Binary;
      };
    }
  | {
      cosmwasm_migrate_msg: {
        code_id: number;
        msg: Binary;
      };
    }
  | {
      evm_call: {
        msg: Binary;
      };
    }
  | {
      evm_raw_call: {
        msg: Binary;
      };
    };
export interface ProcessorCallbackInfo {
  bridge_callback_address?: Addr | null;
  created_at: number;
  domain: Domain;
  execution_id: number;
  execution_result: ExecutionResult;
  initiator: OperationInitiator;
  label: string;
  last_updated_at: number;
  messages: ProcessorMessage[];
  processor_callback_address: Addr;
  ttl?: Expiration | null;
}
export type ArrayOfProcessorCallbackInfo = ProcessorCallbackInfo[];
export type ArrayOfAddr = Addr[];

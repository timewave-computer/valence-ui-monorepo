/**
 * This file was automatically generated by @cosmwasm/ts-codegen@1.11.1.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import {
  CosmWasmClient,
  SigningCosmWasmClient,
  ExecuteResult,
} from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import {
  InstantiateMsg,
  ExecuteMsg,
  Binary,
  QueryMsg,
  Order,
  ArrayOfProgramResponse,
  ProgramResponse,
  NullableProgramResponse,
  Uint64,
} from "./ProgramRegistry.types";
export interface ProgramRegistryReadOnlyInterface {
  contractAddress: string;
  getConfig: ({ id }: { id: number }) => Promise<ProgramResponse>;
  getConfigBackup: ({ id }: { id: number }) => Promise<NullableProgramResponse>;
  getAllConfigs: ({
    end,
    limit,
    order,
    start,
  }: {
    end?: number;
    limit?: number;
    order?: Order;
    start?: number;
  }) => Promise<ArrayOfProgramResponse>;
  getLastId: () => Promise<Uint64>;
}
export class ProgramRegistryQueryClient
  implements ProgramRegistryReadOnlyInterface
{
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getConfig = this.getConfig.bind(this);
    this.getConfigBackup = this.getConfigBackup.bind(this);
    this.getAllConfigs = this.getAllConfigs.bind(this);
    this.getLastId = this.getLastId.bind(this);
  }
  getConfig = async ({ id }: { id: number }): Promise<ProgramResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_config: {
        id,
      },
    });
  };
  getConfigBackup = async ({
    id,
  }: {
    id: number;
  }): Promise<NullableProgramResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_config_backup: {
        id,
      },
    });
  };
  getAllConfigs = async ({
    end,
    limit,
    order,
    start,
  }: {
    end?: number;
    limit?: number;
    order?: Order;
    start?: number;
  }): Promise<ArrayOfProgramResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_all_configs: {
        end,
        limit,
        order,
        start,
      },
    });
  };
  getLastId = async (): Promise<Uint64> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_last_id: {},
    });
  };
}
export interface ProgramRegistryInterface
  extends ProgramRegistryReadOnlyInterface {
  contractAddress: string;
  sender: string;
  reserveId: (
    {
      addr,
    }: {
      addr: string;
    },
    fee?: number | StdFee | "auto",
    memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>;
  saveProgram: (
    {
      id,
      owner,
      programConfig,
    }: {
      id: number;
      owner: string;
      programConfig: Binary;
    },
    fee?: number | StdFee | "auto",
    memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>;
  updateProgram: (
    {
      id,
      programConfig,
    }: {
      id: number;
      programConfig: Binary;
    },
    fee?: number | StdFee | "auto",
    memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>;
}
export class ProgramRegistryClient
  extends ProgramRegistryQueryClient
  implements ProgramRegistryInterface
{
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(
    client: SigningCosmWasmClient,
    sender: string,
    contractAddress: string
  ) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.reserveId = this.reserveId.bind(this);
    this.saveProgram = this.saveProgram.bind(this);
    this.updateProgram = this.updateProgram.bind(this);
  }
  reserveId = async (
    {
      addr,
    }: {
      addr: string;
    },
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        reserve_id: {
          addr,
        },
      },
      fee,
      memo,
      _funds
    );
  };
  saveProgram = async (
    {
      id,
      owner,
      programConfig,
    }: {
      id: number;
      owner: string;
      programConfig: Binary;
    },
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        save_program: {
          id,
          owner,
          program_config: programConfig,
        },
      },
      fee,
      memo,
      _funds
    );
  };
  updateProgram = async (
    {
      id,
      programConfig,
    }: {
      id: number;
      programConfig: Binary;
    },
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        update_program: {
          id,
          program_config: programConfig,
        },
      },
      fee,
      memo,
      _funds
    );
  };
}

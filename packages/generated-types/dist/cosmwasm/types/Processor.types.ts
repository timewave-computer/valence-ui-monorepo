/**
 * This file was automatically generated by @cosmwasm/ts-codegen@1.11.1.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

export interface InstantiateMsg {
  authorization_contract: string;
  polytone_contracts?: PolytoneContracts | null;
}
export interface PolytoneContracts {
  polytone_note_address: string;
  polytone_proxy_address: string;
  timeout_seconds: number;
}
export type QueryMsg =
  | {
      config: {};
    }
  | {
      get_queue: {
        from?: number | null;
        priority: Priority;
        to?: number | null;
      };
    }
  | {
      is_queue_empty: {};
    }
  | {
      pending_polytone_callbacks: {
        limit?: number | null;
        start_after?: number | null;
      };
    }
  | {
      pending_polytone_callback: {
        execution_id: number;
      };
    };
export type Priority = "medium" | "high";
export type ProcessorDomain =
  | "main"
  | {
      external: Polytone;
    };
export type Addr = string;
export type PolytoneProxyState =
  | ("timed_out" | "pending_response" | "created")
  | {
      unexpected_error: string;
    };
export type State = "paused" | "active";
export interface Config {
  authorization_contract: string;
  processor_domain: ProcessorDomain;
  state: State;
}
export interface Polytone {
  polytone_note_address: Addr;
  polytone_proxy_address: Addr;
  proxy_on_main_domain_state: PolytoneProxyState;
  timeout_seconds: number;
}
export type ProcessorMessage =
  | {
      cosmwasm_execute_msg: {
        msg: Binary;
      };
    }
  | {
      cosmwasm_migrate_msg: {
        code_id: number;
        msg: Binary;
      };
    };
export type Binary = string;
export type Expiration =
  | {
      at_height: number;
    }
  | {
      at_time: Timestamp;
    }
  | {
      never: {};
    };
export type Timestamp = Uint64;
export type Uint64 = string;
export type Subroutine =
  | {
      atomic: AtomicSubroutine;
    }
  | {
      non_atomic: NonAtomicSubroutine;
    };
export type LibraryAccountType =
  | {
      "|library_account_addr|": string;
    }
  | {
      "|account_id|": number;
    }
  | {
      "|library_id|": number;
    };
export type Domain =
  | "main"
  | {
      external: string;
    };
export type ParamRestriction =
  | {
      must_be_included: string[];
    }
  | {
      cannot_be_included: string[];
    }
  | {
      must_be_value: [string[], Binary];
    };
export type MessageType = "cosmwasm_execute_msg" | "cosmwasm_migrate_msg";
export type Duration =
  | {
      height: number;
    }
  | {
      time: number;
    };
export type RetryTimes =
  | "indefinitely"
  | {
      amount: number;
    };
export type ArrayOfMessageBatch = MessageBatch[];
export interface MessageBatch {
  id: number;
  msgs: ProcessorMessage[];
  priority: Priority;
  retry?: CurrentRetry | null;
  subroutine: Subroutine;
}
export interface CurrentRetry {
  retry_amounts: number;
  retry_cooldown: Expiration;
}
export interface AtomicSubroutine {
  functions: AtomicFunction[];
  retry_logic?: RetryLogic | null;
}
export interface AtomicFunction {
  contract_address: LibraryAccountType;
  domain: Domain;
  message_details: MessageDetails;
}
export interface MessageDetails {
  message: Message;
  message_type: MessageType;
}
export interface Message {
  name: string;
  params_restrictions?: ParamRestriction[] | null;
}
export interface RetryLogic {
  interval: Duration;
  times: RetryTimes;
}
export interface NonAtomicSubroutine {
  functions: NonAtomicFunction[];
}
export interface NonAtomicFunction {
  callback_confirmation?: FunctionCallback | null;
  contract_address: LibraryAccountType;
  domain: Domain;
  message_details: MessageDetails;
  retry_logic?: RetryLogic | null;
}
export interface FunctionCallback {
  callback_message: Binary;
  contract_address: Addr;
}
export type Boolean = boolean;
export type ExecutionResult =
  | ("in_process" | "success" | "removed_by_owner")
  | {
      rejected: string;
    }
  | {
      partially_executed: [number, string];
    }
  | {
      timeout: boolean;
    }
  | {
      unexpected_error: string;
    };
export type PolytoneCallbackState =
  | ("pending" | "timed_out")
  | {
      unexpected_error: string;
    };
export interface PendingPolytoneCallbackInfo {
  execution_result: ExecutionResult;
  state: PolytoneCallbackState;
}
export type ArrayOfPendingPolytoneCallbackInfo = PendingPolytoneCallbackInfo[];

// Generated by ts-to-zod
import { z } from "zod";

export const domainSchema = z.object({
  CosmosCosmwasm: z.string(),
});

export const accountTypeSchema = z.union([
  z.object({
    Addr: z.object({
      addr: z.string(),
    }),
  }),
  z.object({
    Base: z.object({
      admin: z.string().optional().nullable(),
    }),
  }),
]);

export const addrSchema = z.string();

export const authorizationDurationSchema = z.union([
  z.literal("forever"),
  z.object({
    seconds: z.number(),
  }),
  z.object({
    blocks: z.number(),
  }),
]);

export const uint128Schema = z.string();

export const uint64Schema = z.string();

export const prioritySchema = z.union([z.literal("medium"), z.literal("high")]);

export const libraryAccountTypeSchema = z.union([
  z.object({
    "|library_account_addr|": z.string(),
  }),
  z.object({
    "|account_id|": z.number(),
  }),
  z.object({
    "|library_id|": z.number(),
  }),
]);

export const domain2Schema = z.union([
  z.literal("main"),
  z.object({
    external: z.string(),
  }),
]);

export const binarySchema = z.string();

export const messageTypeSchema = z.union([
  z.literal("cosmwasm_execute_msg"),
  z.literal("cosmwasm_migrate_msg"),
]);

export const durationSchema = z.union([
  z.object({
    height: z.number(),
  }),
  z.object({
    time: z.number(),
  }),
]);

export const retryTimesSchema = z.union([
  z.literal("indefinitely"),
  z.object({
    amount: z.number(),
  }),
]);

export const uncheckedDenomSchema = z.union([
  z.object({
    native: z.string(),
  }),
  z.object({
    cw20: z.string(),
  }),
]);

export const decimalSchema = z.string();

export const uncheckedSplitAmount2Schema = z.union([
  z.object({
    fixed_amount: uint128Schema,
  }),
  z.object({
    fixed_ratio: decimalSchema,
  }),
  z.object({
    dynamic_ratio: z.object({
      contract_addr: z.string(),
      params: z.string(),
    }),
  }),
]);

export const pairTypeSchema = z.union([
  z.object({
    xyk: z.object({}),
  }),
  z.object({
    stable: z.object({}),
  }),
  z.object({
    custom: z.string(),
  }),
]);

export const pairType2Schema = z.union([
  z.object({
    xyk: z.object({}),
  }),
  z.object({
    stable: z.object({}),
  }),
  z.object({
    custom: z.string(),
  }),
]);

export const poolType2Schema = z.union([
  z.literal("native_lp_token"),
  z.literal("cw20_lp_token"),
]);

export const authorizationDataSchema = z.object({
  authorization_addr: z.string(),
  authorization_bridge_addrs: z.object({}),
  processor_addrs: z.record(addrSchema),
  processor_bridge_addrs: z.array(z.string()),
});

export const accountInfoSchema = z.object({
  addr: z.string().optional().nullable(),
  domain: domainSchema,
  name: z.string(),
  ty: accountTypeSchema,
});

export const retryLogicSchema = z.object({
  interval: durationSchema,
  times: retryTimesSchema,
});

export const paramRestrictionSchema = z.union([
  z.object({
    must_be_included: z.array(z.string()),
  }),
  z.object({
    cannot_be_included: z.array(z.string()),
  }),
  z.object({
    must_be_value: z.tuple([z.array(z.string()), binarySchema]),
  }),
]);

export const functionCallbackSchema = z.object({
  callback_message: binarySchema,
  contract_address: addrSchema,
});

export const uncheckedForwardingConfigSchema = z.object({
  denom: uncheckedDenomSchema,
  max_amount: uint128Schema,
});

export const forwardingConstraintsSchema = z.object({
  min_interval: durationSchema.optional().nullable(),
});

export const uncheckedSplitAmountSchema = z.union([
  z.object({
    fixed_amount: uint128Schema,
  }),
  z.object({
    fixed_ratio: decimalSchema,
  }),
  z.object({
    dynamic_ratio: z.object({
      contract_addr: z.string(),
      params: z.string(),
    }),
  }),
]);

export const uncheckedSplitConfig2Schema = z.object({
  account: libraryAccountTypeSchema,
  amount: uncheckedSplitAmount2Schema,
  denom: uncheckedDenomSchema,
  factor: z.number().optional().nullable(),
});

export const assetDataSchema = z.object({
  asset1: z.string(),
  asset2: z.string(),
});

export const poolTypeSchema = z.union([
  z.object({
    native_lp_token: pairTypeSchema,
  }),
  z.object({
    cw20_lp_token: pairType2Schema,
  }),
]);

export const liquidityWithdrawerConfigSchema = z.object({
  pool_type: poolType2Schema,
});

export const linkSchema = z.object({
  input_accounts_id: z.array(z.number()),
  library_id: z.number(),
  output_accounts_id: z.array(z.number()),
});

export const permissionTypeInfoSchema = z.union([
  z.object({
    with_call_limit: z.array(z.tuple([z.string(), uint128Schema])),
  }),
  z.object({
    without_call_limit: z.array(z.string()),
  }),
]);

export const timestampSchema = uint64Schema;

export const libraryConfigUpdate2Schema = z.object({
  forwarding_configs: z
    .array(uncheckedForwardingConfigSchema)
    .optional()
    .nullable(),
  forwarding_constraints: forwardingConstraintsSchema.optional().nullable(),
  input_addr: libraryAccountTypeSchema.optional().nullable(),
  output_addr: libraryAccountTypeSchema.optional().nullable(),
});

export const libraryConfigUpdate4Schema = z.object({
  base_denom: uncheckedDenomSchema.optional().nullable(),
  output_addr: libraryAccountTypeSchema.optional().nullable(),
  splits: z.array(uncheckedSplitConfig2Schema).optional().nullable(),
});

export const libraryConfigUpdate6Schema = z.object({
  input_addr: libraryAccountTypeSchema.optional().nullable(),
  output_addr: libraryAccountTypeSchema.optional().nullable(),
  pool_addr: z.string().optional().nullable(),
  withdrawer_config: liquidityWithdrawerConfigSchema.optional().nullable(),
});

export const expirationSchema = z.union([
  z.object({
    at_height: z.number(),
  }),
  z.object({
    at_time: timestampSchema,
  }),
  z.object({
    never: z.object({}),
  }),
]);

export const authorizationModeInfoSchema = z.union([
  z.literal("permissionless"),
  z.object({
    permissioned: permissionTypeInfoSchema,
  }),
]);

export const messageSchema = z.object({
  name: z.string(),
  params_restrictions: z.array(paramRestrictionSchema).optional().nullable(),
});

export const messageDetailsSchema = z.object({
  message: messageSchema,
  message_type: messageTypeSchema,
});

export const uncheckedSplitConfigSchema = z.object({
  account: libraryAccountTypeSchema,
  amount: uncheckedSplitAmountSchema,
  denom: uncheckedDenomSchema,
});

export const liquidityProviderConfigSchema = z.object({
  asset_data: assetDataSchema,
  pool_type: poolTypeSchema,
  slippage_tolerance: decimalSchema.optional().nullable(),
});

export const libraryConfigUpdate3Schema = z.object({
  input_addr: libraryAccountTypeSchema.optional().nullable(),
  splits: z.array(uncheckedSplitConfigSchema).optional().nullable(),
});

export const libraryConfigUpdate5Schema = z.object({
  input_addr: libraryAccountTypeSchema.optional().nullable(),
  lp_config: liquidityProviderConfigSchema.optional().nullable(),
  output_addr: libraryAccountTypeSchema.optional().nullable(),
  pool_addr: z.string().optional().nullable(),
});

export const atomicFunctionSchema = z.object({
  contract_address: libraryAccountTypeSchema,
  domain: domain2Schema,
  message_details: messageDetailsSchema,
});

export const nonAtomicFunctionSchema = z.object({
  callback_confirmation: functionCallbackSchema.optional().nullable(),
  contract_address: libraryAccountTypeSchema,
  domain: domain2Schema,
  message_details: messageDetailsSchema,
  retry_logic: retryLogicSchema.optional().nullable(),
});

export const libraryConfigUpdateSchema = z.union([
  z.literal("None"),
  z.object({
    ValenceForwarderLibrary: libraryConfigUpdate2Schema,
  }),
  z.object({
    ValenceSplitterLibrary: libraryConfigUpdate3Schema,
  }),
  z.object({
    ValenceReverseSplitterLibrary: libraryConfigUpdate4Schema,
  }),
  z.object({
    ValenceAstroportLper: libraryConfigUpdate5Schema,
  }),
  z.object({
    ValenceAstroportWithdrawer: libraryConfigUpdate6Schema,
  }),
]);

export const atomicSubroutineSchema = z.object({
  functions: z.array(atomicFunctionSchema),
  retry_logic: retryLogicSchema.optional().nullable(),
});

export const nonAtomicSubroutineSchema = z.object({
  functions: z.array(nonAtomicFunctionSchema),
});

export const subroutineSchema = z.union([
  z.object({
    atomic: atomicSubroutineSchema,
  }),
  z.object({
    non_atomic: nonAtomicSubroutineSchema,
  }),
]);

export const libraryInfoSchema = z.object({
  addr: z.string().optional().nullable(),
  domain: domainSchema,
  name: z.string(),
  config: libraryConfigUpdateSchema.optional(),
});

export const authorizationInfoSchema = z.object({
  duration: authorizationDurationSchema,
  label: z.string(),
  max_concurrent_executions: z.number().optional().nullable(),
  mode: authorizationModeInfoSchema,
  not_before: expirationSchema,
  priority: prioritySchema.optional().nullable(),
  subroutine: subroutineSchema,
});

export const programConfigSchema = z.object({
  accounts: z.record(accountInfoSchema),
  authorization_data: authorizationDataSchema.optional(),
  authorizations: z.array(authorizationInfoSchema),
  id: z.number().optional(),
  libraries: z.record(libraryInfoSchema),
  links: z.record(linkSchema),
  owner: z.string(),
});

export const authorizationInfoUpdateSchema = z.union([
  z.object({
    Add: authorizationInfoSchema,
  }),
  z.object({
    Modify: z.object({
      expiration: expirationSchema.optional().nullable(),
      label: z.string(),
      max_concurrent_executions: z.number().optional().nullable(),
      not_before: expirationSchema.optional().nullable(),
      priority: prioritySchema.optional().nullable(),
    }),
  }),
  z.object({
    Disable: z.string(),
  }),
  z.object({
    Enable: z.string(),
  }),
]);

export const programConfigUpdateSchema = z.object({
  authorizations: z.array(authorizationInfoUpdateSchema),
  id: z.number(),
  libraries: z.object({}),
  owner: z.string().optional().nullable(),
});

export const sanitizedProgramConfigSchema = z.object({
  program_config: programConfigSchema,
  program_config_update: programConfigUpdateSchema,
});

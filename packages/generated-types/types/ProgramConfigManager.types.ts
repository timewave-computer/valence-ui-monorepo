/**
 * This file was automatically generated by @cosmwasm/ts-codegen@1.11.1.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

export type AuthorizationDuration =
  | "forever"
  | {
      seconds: number;
    }
  | {
      blocks: number;
    };
export type AuthorizationModeInfo =
  | "permissionless"
  | {
      permissioned: PermissionTypeInfo;
    };
export type PermissionTypeInfo =
  | {
      with_call_limit: [string, Uint128][];
    }
  | {
      without_call_limit: string[];
    };
export type Uint128 = string;
export type Expiration =
  | {
      at_height: number;
    }
  | {
      at_time: Timestamp;
    }
  | {
      never: {};
    };
export type Timestamp = Uint64;
export type Uint64 = string;
export type Priority = "medium" | "high";
export type Subroutine =
  | {
      atomic: AtomicSubroutine;
    }
  | {
      non_atomic: NonAtomicSubroutine;
    };
export type LibraryAccountType =
  | {
      "|library_account_addr|": string;
    }
  | {
      "|account_id|": number;
    }
  | {
      "|library_id|": number;
    };
export type Domain2 =
  | "main"
  | {
      external: string;
    };
export type ParamRestriction =
  | {
      must_be_included: string[];
    }
  | {
      cannot_be_included: string[];
    }
  | {
      must_be_value: [string[], Binary];
    };
export type Binary = string;
export type MessageType = "cosmwasm_execute_msg" | "cosmwasm_migrate_msg";
export type Duration =
  | {
      height: number;
    }
  | {
      time: number;
    };
export type RetryTimes =
  | "indefinitely"
  | {
      amount: number;
    };
export type Addr = string;
export type AuthorizationInfoUpdate =
  | {
      Add: AuthorizationInfo;
    }
  | {
      Modify: {
        expiration?: Expiration | null;
        label: string;
        max_concurrent_executions?: number | null;
        not_before?: Expiration | null;
        priority?: Priority | null;
      };
    }
  | {
      Disable: string;
    }
  | {
      Enable: string;
    };
export interface InstantiateMsg {
  program_config: ProgramConfig;
  program_config_update: ProgramConfigUpdate;
}
export interface ProgramConfig {
  accounts: {};
  authorization_data?: AuthorizationData;
  authorizations: AuthorizationInfo[];
  id?: number;
  libraries: {};
  links: {};
  owner: string;
}
export interface AuthorizationData {
  authorization_addr: string;
  authorization_bridge_addrs: {};
  processor_addrs: {};
  processor_bridge_addrs: {};
}
export interface AuthorizationInfo {
  duration: AuthorizationDuration;
  label: string;
  max_concurrent_executions?: number | null;
  mode: AuthorizationModeInfo;
  not_before: Expiration;
  priority?: Priority | null;
  subroutine: Subroutine;
}
export interface AtomicSubroutine {
  functions: AtomicFunction[];
  retry_logic?: RetryLogic | null;
}
export interface AtomicFunction {
  contract_address: LibraryAccountType;
  domain: Domain2;
  message_details: MessageDetails;
}
export interface MessageDetails {
  message: Message;
  message_type: MessageType;
}
export interface Message {
  name: string;
  params_restrictions?: ParamRestriction[] | null;
}
export interface RetryLogic {
  interval: Duration;
  times: RetryTimes;
}
export interface NonAtomicSubroutine {
  functions: NonAtomicFunction[];
}
export interface NonAtomicFunction {
  callback_confirmation?: FunctionCallback | null;
  contract_address: LibraryAccountType;
  domain: Domain2;
  message_details: MessageDetails;
  retry_logic?: RetryLogic | null;
}
export interface FunctionCallback {
  callback_message: Binary;
  contract_address: Addr;
}
export interface ProgramConfigUpdate {
  authorizations: AuthorizationInfoUpdate[];
  id: number;
  libraries: {};
  owner?: string | null;
}
export type ExecuteMsg = string;
export type QueryMsg = string;

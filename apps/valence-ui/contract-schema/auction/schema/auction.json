{
  "contract_name": "auction",
  "contract_version": "0.1.5",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "auction_strategy",
      "chain_halt_config",
      "pair",
      "price_freshness_strategy"
    ],
    "properties": {
      "auction_strategy": {
        "$ref": "#/definitions/AuctionStrategy"
      },
      "chain_halt_config": {
        "$ref": "#/definitions/ChainHaltConfig"
      },
      "pair": {
        "$ref": "#/definitions/Pair"
      },
      "price_freshness_strategy": {
        "$ref": "#/definitions/PriceFreshnessStrategy"
      }
    },
    "additionalProperties": false,
    "definitions": {
      "AuctionStrategy": {
        "type": "object",
        "required": ["end_price_perc", "start_price_perc"],
        "properties": {
          "end_price_perc": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "start_price_perc": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      "ChainHaltConfig": {
        "type": "object",
        "required": ["block_avg", "cap"],
        "properties": {
          "block_avg": {
            "description": "seconds each block is generated",
            "allOf": [
              {
                "$ref": "#/definitions/Decimal"
              }
            ]
          },
          "cap": {
            "description": "Time in seconds of how much of a halt we accept",
            "type": "integer",
            "format": "uint128",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "Pair": {
        "type": "array",
        "items": [
          {
            "type": "string"
          },
          {
            "type": "string"
          }
        ],
        "maxItems": 2,
        "minItems": 2
      },
      "PriceFreshnessStrategy": {
        "description": "Gives us the strategy we should use for when the data is not fresh. \"multiplier\" list is sorted in descending order, so after we check the list, if the data is fresh, the multiplier is 1.\n\nEx: smallest day in the list is \"0.5\" (12 hours), so the multiplier will be 1 if the data is updated in the last 12 hours.",
        "type": "object",
        "required": ["limit", "multipliers"],
        "properties": {
          "limit": {
            "description": "Amount of days price considered no longer fresh",
            "allOf": [
              {
                "$ref": "#/definitions/Decimal"
              }
            ]
          },
          "multipliers": {
            "description": "Multiplier per day of unfresh data (older than day, multipler) for when data is older than 2 days, we add: (\"2\", \"1.5\")",
            "type": "array",
            "items": {
              "type": "array",
              "items": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "$ref": "#/definitions/Decimal"
                }
              ],
              "maxItems": 2,
              "minItems": 2
            }
          }
        },
        "additionalProperties": false
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "description": "Send funds to be auctioned on the next auction, can only be called by the admin/auctions manager",
        "type": "object",
        "required": ["auction_funds_manager"],
        "properties": {
          "auction_funds_manager": {
            "type": "object",
            "required": ["sender"],
            "properties": {
              "sender": {
                "$ref": "#/definitions/Addr"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Send funds to be auctioned on the next auction",
        "type": "object",
        "required": ["auction_funds"],
        "properties": {
          "auction_funds": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Withdraw funds from future auction, can only be called by the admin/auctions manager",
        "type": "object",
        "required": ["withdraw_funds_manager"],
        "properties": {
          "withdraw_funds_manager": {
            "type": "object",
            "required": ["sender"],
            "properties": {
              "sender": {
                "$ref": "#/definitions/Addr"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Withdraw funds from future auction",
        "type": "object",
        "required": ["withdraw_funds"],
        "properties": {
          "withdraw_funds": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Bid on the current auction",
        "type": "object",
        "required": ["bid"],
        "properties": {
          "bid": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Finish the current auction and send funds to the funds provider Send pair.1 according to the weight of the funds provider from the total amount If we have unsold pair.0, send to funds provider according to provided weight",
        "type": "object",
        "required": ["finish_auction"],
        "properties": {
          "finish_auction": {
            "type": "object",
            "required": ["limit"],
            "properties": {
              "limit": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Message to clean finished auction unneeded storage",
        "type": "object",
        "required": ["clean_after_auction"],
        "properties": {
          "clean_after_auction": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Admin messages that can only be called by the auctions manager",
        "type": "object",
        "required": ["admin"],
        "properties": {
          "admin": {
            "$ref": "#/definitions/AdminMsgs"
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      },
      "AdminMsgs": {
        "description": "Admin messages that can only be called by the auctions manager",
        "oneOf": [
          {
            "description": "Pause auction",
            "type": "string",
            "enum": ["pause_auction"]
          },
          {
            "description": "Resume paused auction",
            "type": "string",
            "enum": ["resume_auction"]
          },
          {
            "description": "Update the auction strategy",
            "type": "object",
            "required": ["update_strategy"],
            "properties": {
              "update_strategy": {
                "type": "object",
                "required": ["strategy"],
                "properties": {
                  "strategy": {
                    "$ref": "#/definitions/AuctionStrategy"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Start a new auction",
            "type": "object",
            "required": ["start_auction"],
            "properties": {
              "start_auction": {
                "$ref": "#/definitions/NewAuctionParams"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Update the chain halt config",
            "type": "object",
            "required": ["update_chain_halt_config"],
            "properties": {
              "update_chain_halt_config": {
                "$ref": "#/definitions/ChainHaltConfig"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Update the price freshness strategy",
            "type": "object",
            "required": ["update_price_freshness_strategy"],
            "properties": {
              "update_price_freshness_strategy": {
                "$ref": "#/definitions/PriceFreshnessStrategy"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "AuctionStrategy": {
        "type": "object",
        "required": ["end_price_perc", "start_price_perc"],
        "properties": {
          "end_price_perc": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "start_price_perc": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      "ChainHaltConfig": {
        "type": "object",
        "required": ["block_avg", "cap"],
        "properties": {
          "block_avg": {
            "description": "seconds each block is generated",
            "allOf": [
              {
                "$ref": "#/definitions/Decimal"
              }
            ]
          },
          "cap": {
            "description": "Time in seconds of how much of a halt we accept",
            "type": "integer",
            "format": "uint128",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "NewAuctionParams": {
        "type": "object",
        "required": ["end_block"],
        "properties": {
          "end_block": {
            "description": "When auction should end",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "start_block": {
            "description": "Optional start block, if not provided, it will start from the current block",
            "type": ["integer", "null"],
            "format": "uint64",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      "PriceFreshnessStrategy": {
        "description": "Gives us the strategy we should use for when the data is not fresh. \"multiplier\" list is sorted in descending order, so after we check the list, if the data is fresh, the multiplier is 1.\n\nEx: smallest day in the list is \"0.5\" (12 hours), so the multiplier will be 1 if the data is updated in the last 12 hours.",
        "type": "object",
        "required": ["limit", "multipliers"],
        "properties": {
          "limit": {
            "description": "Amount of days price considered no longer fresh",
            "allOf": [
              {
                "$ref": "#/definitions/Decimal"
              }
            ]
          },
          "multipliers": {
            "description": "Multiplier per day of unfresh data (older than day, multipler) for when data is older than 2 days, we add: (\"2\", \"1.5\")",
            "type": "array",
            "items": {
              "type": "array",
              "items": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "$ref": "#/definitions/Decimal"
                }
              ],
              "maxItems": 2,
              "minItems": 2
            }
          }
        },
        "additionalProperties": false
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "string",
        "enum": ["get_admin", "get_mm_data"]
      },
      {
        "description": "Get the config which includes the pair and the min amount",
        "type": "string",
        "enum": ["get_config"]
      },
      {
        "description": "Get amount of funds provided by the given address on the current and next auction",
        "type": "object",
        "required": ["get_funds_amount"],
        "properties": {
          "get_funds_amount": {
            "type": "object",
            "required": ["addr"],
            "properties": {
              "addr": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Get the current auction details",
        "type": "string",
        "enum": ["get_auction"]
      },
      {
        "description": "Get the price of the auction on the current block",
        "type": "string",
        "enum": ["get_price"]
      },
      {
        "description": "Get the strategy of the auction",
        "type": "string",
        "enum": ["get_strategy"]
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "get_admin": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Addr",
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "get_auction": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ActiveAuction",
      "type": "object",
      "required": [
        "available_amount",
        "end_block",
        "end_price",
        "last_checked_block",
        "leftovers",
        "resolved_amount",
        "start_block",
        "start_price",
        "status",
        "total_amount"
      ],
      "properties": {
        "available_amount": {
          "description": "The available amount of pair.0",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "end_block": {
          "description": "The auction ending block height",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "end_price": {
          "description": "The price on end_block",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "last_checked_block": {
          "description": "The last checked block for chain halts",
          "allOf": [
            {
              "$ref": "#/definitions/BlockInfo"
            }
          ]
        },
        "leftovers": {
          "description": "leftover funds to add to the next auction",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Uint128"
          },
          "maxItems": 2,
          "minItems": 2
        },
        "resolved_amount": {
          "description": "The received and resolved amount of pair.1",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "start_block": {
          "description": "The auction starting block height",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "start_price": {
          "description": "The price on start_block",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "status": {
          "description": "The auction status",
          "allOf": [
            {
              "$ref": "#/definitions/ActiveAuctionStatus"
            }
          ]
        },
        "total_amount": {
          "description": "The total funds of pair.0 that was sent to sell",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "ActiveAuctionStatus": {
          "oneOf": [
            {
              "description": "The auction started, and last resolved block height is (u64)",
              "type": "string",
              "enum": ["started"]
            },
            {
              "description": "The auction is finished, waiting for the funds to be resolved",
              "type": "string",
              "enum": ["finished"]
            },
            {
              "description": "Handle closing auction, addr of the last funds provider we resolved and the total amounts of the pair we sent already (provider, total_amount_pair.0, total_amount_pair.1)",
              "type": "object",
              "required": ["close_auction"],
              "properties": {
                "close_auction": {
                  "type": "array",
                  "items": [
                    {
                      "anyOf": [
                        {
                          "$ref": "#/definitions/Addr"
                        },
                        {
                          "type": "null"
                        }
                      ]
                    },
                    {
                      "$ref": "#/definitions/Uint128"
                    },
                    {
                      "$ref": "#/definitions/Uint128"
                    }
                  ],
                  "maxItems": 3,
                  "minItems": 3
                }
              },
              "additionalProperties": false
            },
            {
              "description": "The auction is closed",
              "type": "string",
              "enum": ["auction_closed"]
            }
          ]
        },
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "BlockInfo": {
          "type": "object",
          "required": ["chain_id", "height", "time"],
          "properties": {
            "chain_id": {
              "type": "string"
            },
            "height": {
              "description": "The height of a block is the number of blocks preceding it in the blockchain.",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "time": {
              "description": "Absolute time of the block creation in seconds since the UNIX epoch (00:00:00 on 1970-01-01 UTC).\n\nThe source of this is the [BFT Time in Tendermint](https://github.com/tendermint/tendermint/blob/58dc1726/spec/consensus/bft-time.md), which has the same nanosecond precision as the `Timestamp` type.\n\n# Examples\n\nUsing chrono:\n\n``` # use cosmwasm_std::{Addr, BlockInfo, ContractInfo, Env, MessageInfo, Timestamp, TransactionInfo}; # let env = Env { #     block: BlockInfo { #         height: 12_345, #         time: Timestamp::from_nanos(1_571_797_419_879_305_533), #         chain_id: \"cosmos-testnet-14002\".to_string(), #     }, #     transaction: Some(TransactionInfo { index: 3 }), #     contract: ContractInfo { #         address: Addr::unchecked(\"contract\"), #     }, # }; # extern crate chrono; use chrono::NaiveDateTime; let seconds = env.block.time.seconds(); let nsecs = env.block.time.subsec_nanos(); let dt = NaiveDateTime::from_timestamp(seconds as i64, nsecs as u32); ```\n\nCreating a simple millisecond-precision timestamp (as used in JavaScript):\n\n``` # use cosmwasm_std::{Addr, BlockInfo, ContractInfo, Env, MessageInfo, Timestamp, TransactionInfo}; # let env = Env { #     block: BlockInfo { #         height: 12_345, #         time: Timestamp::from_nanos(1_571_797_419_879_305_533), #         chain_id: \"cosmos-testnet-14002\".to_string(), #     }, #     transaction: Some(TransactionInfo { index: 3 }), #     contract: ContractInfo { #         address: Addr::unchecked(\"contract\"), #     }, # }; let millis = env.block.time.nanos() / 1_000_000; ```",
              "allOf": [
                {
                  "$ref": "#/definitions/Timestamp"
                }
              ]
            }
          }
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "get_config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AuctionConfig",
      "type": "object",
      "required": [
        "chain_halt_config",
        "is_paused",
        "pair",
        "price_freshness_strategy"
      ],
      "properties": {
        "chain_halt_config": {
          "$ref": "#/definitions/ChainHaltConfig"
        },
        "is_paused": {
          "type": "boolean"
        },
        "pair": {
          "$ref": "#/definitions/Pair"
        },
        "price_freshness_strategy": {
          "$ref": "#/definitions/PriceFreshnessStrategy"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "ChainHaltConfig": {
          "type": "object",
          "required": ["block_avg", "cap"],
          "properties": {
            "block_avg": {
              "description": "seconds each block is generated",
              "allOf": [
                {
                  "$ref": "#/definitions/Decimal"
                }
              ]
            },
            "cap": {
              "description": "Time in seconds of how much of a halt we accept",
              "type": "integer",
              "format": "uint128",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "Pair": {
          "type": "array",
          "items": [
            {
              "type": "string"
            },
            {
              "type": "string"
            }
          ],
          "maxItems": 2,
          "minItems": 2
        },
        "PriceFreshnessStrategy": {
          "description": "Gives us the strategy we should use for when the data is not fresh. \"multiplier\" list is sorted in descending order, so after we check the list, if the data is fresh, the multiplier is 1.\n\nEx: smallest day in the list is \"0.5\" (12 hours), so the multiplier will be 1 if the data is updated in the last 12 hours.",
          "type": "object",
          "required": ["limit", "multipliers"],
          "properties": {
            "limit": {
              "description": "Amount of days price considered no longer fresh",
              "allOf": [
                {
                  "$ref": "#/definitions/Decimal"
                }
              ]
            },
            "multipliers": {
              "description": "Multiplier per day of unfresh data (older than day, multipler) for when data is older than 2 days, we add: (\"2\", \"1.5\")",
              "type": "array",
              "items": {
                "type": "array",
                "items": [
                  {
                    "$ref": "#/definitions/Decimal"
                  },
                  {
                    "$ref": "#/definitions/Decimal"
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            }
          },
          "additionalProperties": false
        }
      }
    },
    "get_funds_amount": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "GetFundsAmountResponse",
      "type": "object",
      "required": ["curr", "next"],
      "properties": {
        "curr": {
          "$ref": "#/definitions/Uint128"
        },
        "next": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "get_mm_data": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "GetMmResponse",
      "type": "object",
      "required": ["available_amount", "block", "end_block", "price", "status"],
      "properties": {
        "available_amount": {
          "$ref": "#/definitions/Uint128"
        },
        "block": {
          "$ref": "#/definitions/BlockInfo"
        },
        "end_block": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "price": {
          "$ref": "#/definitions/Decimal"
        },
        "status": {
          "$ref": "#/definitions/ActiveAuctionStatus"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "ActiveAuctionStatus": {
          "oneOf": [
            {
              "description": "The auction started, and last resolved block height is (u64)",
              "type": "string",
              "enum": ["started"]
            },
            {
              "description": "The auction is finished, waiting for the funds to be resolved",
              "type": "string",
              "enum": ["finished"]
            },
            {
              "description": "Handle closing auction, addr of the last funds provider we resolved and the total amounts of the pair we sent already (provider, total_amount_pair.0, total_amount_pair.1)",
              "type": "object",
              "required": ["close_auction"],
              "properties": {
                "close_auction": {
                  "type": "array",
                  "items": [
                    {
                      "anyOf": [
                        {
                          "$ref": "#/definitions/Addr"
                        },
                        {
                          "type": "null"
                        }
                      ]
                    },
                    {
                      "$ref": "#/definitions/Uint128"
                    },
                    {
                      "$ref": "#/definitions/Uint128"
                    }
                  ],
                  "maxItems": 3,
                  "minItems": 3
                }
              },
              "additionalProperties": false
            },
            {
              "description": "The auction is closed",
              "type": "string",
              "enum": ["auction_closed"]
            }
          ]
        },
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "BlockInfo": {
          "type": "object",
          "required": ["chain_id", "height", "time"],
          "properties": {
            "chain_id": {
              "type": "string"
            },
            "height": {
              "description": "The height of a block is the number of blocks preceding it in the blockchain.",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "time": {
              "description": "Absolute time of the block creation in seconds since the UNIX epoch (00:00:00 on 1970-01-01 UTC).\n\nThe source of this is the [BFT Time in Tendermint](https://github.com/tendermint/tendermint/blob/58dc1726/spec/consensus/bft-time.md), which has the same nanosecond precision as the `Timestamp` type.\n\n# Examples\n\nUsing chrono:\n\n``` # use cosmwasm_std::{Addr, BlockInfo, ContractInfo, Env, MessageInfo, Timestamp, TransactionInfo}; # let env = Env { #     block: BlockInfo { #         height: 12_345, #         time: Timestamp::from_nanos(1_571_797_419_879_305_533), #         chain_id: \"cosmos-testnet-14002\".to_string(), #     }, #     transaction: Some(TransactionInfo { index: 3 }), #     contract: ContractInfo { #         address: Addr::unchecked(\"contract\"), #     }, # }; # extern crate chrono; use chrono::NaiveDateTime; let seconds = env.block.time.seconds(); let nsecs = env.block.time.subsec_nanos(); let dt = NaiveDateTime::from_timestamp(seconds as i64, nsecs as u32); ```\n\nCreating a simple millisecond-precision timestamp (as used in JavaScript):\n\n``` # use cosmwasm_std::{Addr, BlockInfo, ContractInfo, Env, MessageInfo, Timestamp, TransactionInfo}; # let env = Env { #     block: BlockInfo { #         height: 12_345, #         time: Timestamp::from_nanos(1_571_797_419_879_305_533), #         chain_id: \"cosmos-testnet-14002\".to_string(), #     }, #     transaction: Some(TransactionInfo { index: 3 }), #     contract: ContractInfo { #         address: Addr::unchecked(\"contract\"), #     }, # }; let millis = env.block.time.nanos() / 1_000_000; ```",
              "allOf": [
                {
                  "$ref": "#/definitions/Timestamp"
                }
              ]
            }
          }
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "get_price": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "GetPriceResponse",
      "type": "object",
      "required": ["price", "time"],
      "properties": {
        "price": {
          "$ref": "#/definitions/Decimal"
        },
        "time": {
          "$ref": "#/definitions/Timestamp"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "get_strategy": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AuctionStrategy",
      "type": "object",
      "required": ["end_price_perc", "start_price_perc"],
      "properties": {
        "end_price_perc": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "start_price_perc": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    }
  }
}

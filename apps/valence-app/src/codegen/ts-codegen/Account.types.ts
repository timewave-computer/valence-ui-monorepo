/**
 * This file was automatically generated by @cosmwasm/ts-codegen@1.11.1.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

export interface InstantiateMsg {
  referral?: string | null;
  services_manager: string;
}
export type ExecuteMsg =
  | {
      register_to_service: {
        data?: Binary | null;
        service_name: ValenceServices;
      };
    }
  | {
      deregister_from_service: {
        service_name: ValenceServices;
      };
    }
  | {
      update_service: {
        data: Binary;
        service_name: ValenceServices;
      };
    }
  | {
      pause_service: {
        reason?: string | null;
        service_name: ValenceServices;
      };
    }
  | {
      resume_service: {
        service_name: ValenceServices;
      };
    }
  | {
      send_funds_by_service: {
        atomic: boolean;
        msgs: CosmosMsgForEmpty[];
      };
    }
  | {
      execute_by_service: {
        atomic: boolean;
        msgs: CosmosMsgForEmpty[];
      };
    }
  | {
      execute_by_admin: {
        msgs: CosmosMsgForEmpty[];
      };
    }
  | {
      start_admin_change: {
        addr: string;
        expiration: Expiration;
      };
    }
  | {
      cancel_admin_change: {};
    }
  | {
      approve_admin_change: {};
    };
export type Binary = string;
export type ValenceServices = "rebalancer";
export type CosmosMsgForEmpty =
  | {
      bank: BankMsg;
    }
  | {
      custom: Empty;
    }
  | {
      stargate: {
        type_url: string;
        value: Binary;
        [k: string]: unknown;
      };
    }
  | {
      ibc: IbcMsg;
    }
  | {
      wasm: WasmMsg;
    }
  | {
      gov: GovMsg;
    };
export type BankMsg =
  | {
      send: {
        amount: Coin[];
        to_address: string;
        [k: string]: unknown;
      };
    }
  | {
      burn: {
        amount: Coin[];
        [k: string]: unknown;
      };
    };
export type Uint128 = string;
export type IbcMsg =
  | {
      transfer: {
        amount: Coin;
        channel_id: string;
        timeout: IbcTimeout;
        to_address: string;
        [k: string]: unknown;
      };
    }
  | {
      send_packet: {
        channel_id: string;
        data: Binary;
        timeout: IbcTimeout;
        [k: string]: unknown;
      };
    }
  | {
      close_channel: {
        channel_id: string;
        [k: string]: unknown;
      };
    };
export type Timestamp = Uint64;
export type Uint64 = string;
export type WasmMsg =
  | {
      execute: {
        contract_addr: string;
        funds: Coin[];
        msg: Binary;
        [k: string]: unknown;
      };
    }
  | {
      instantiate: {
        admin?: string | null;
        code_id: number;
        funds: Coin[];
        label: string;
        msg: Binary;
        [k: string]: unknown;
      };
    }
  | {
      migrate: {
        contract_addr: string;
        msg: Binary;
        new_code_id: number;
        [k: string]: unknown;
      };
    }
  | {
      update_admin: {
        admin: string;
        contract_addr: string;
        [k: string]: unknown;
      };
    }
  | {
      clear_admin: {
        contract_addr: string;
        [k: string]: unknown;
      };
    };
export type GovMsg = {
  vote: {
    proposal_id: number;
    vote: VoteOption;
    [k: string]: unknown;
  };
};
export type VoteOption = "yes" | "no" | "abstain" | "no_with_veto";
export type Expiration =
  | {
      at_height: number;
    }
  | {
      at_time: Timestamp;
    }
  | {
      never: {};
    };
export interface Coin {
  amount: Uint128;
  denom: string;
  [k: string]: unknown;
}
export interface Empty {
  [k: string]: unknown;
}
export interface IbcTimeout {
  block?: IbcTimeoutBlock | null;
  timestamp?: Timestamp | null;
  [k: string]: unknown;
}
export interface IbcTimeoutBlock {
  height: number;
  revision: number;
  [k: string]: unknown;
}
export type QueryMsg = "get_admin";
export type Addr = string;

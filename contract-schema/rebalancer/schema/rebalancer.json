{
  "contract_name": "rebalancer",
  "contract_version": "0.1.5",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "auctions_manager_addr",
      "base_denom_whitelist",
      "cycle_start",
      "denom_whitelist",
      "fees",
      "services_manager_addr"
    ],
    "properties": {
      "auctions_manager_addr": {
        "type": "string"
      },
      "base_denom_whitelist": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/BaseDenom"
        }
      },
      "cycle_period": {
        "type": ["integer", "null"],
        "format": "uint64",
        "minimum": 0.0
      },
      "cycle_start": {
        "$ref": "#/definitions/Timestamp"
      },
      "denom_whitelist": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "fees": {
        "$ref": "#/definitions/ServiceFeeConfig"
      },
      "services_manager_addr": {
        "type": "string"
      }
    },
    "additionalProperties": false,
    "definitions": {
      "BaseDenom": {
        "type": "object",
        "required": ["denom", "min_balance_limit"],
        "properties": {
          "denom": {
            "type": "string"
          },
          "min_balance_limit": {
            "$ref": "#/definitions/Uint128"
          }
        },
        "additionalProperties": false
      },
      "ServiceFeeConfig": {
        "type": "object",
        "required": ["denom", "register_fee", "resume_fee"],
        "properties": {
          "denom": {
            "type": "string"
          },
          "register_fee": {
            "$ref": "#/definitions/Uint128"
          },
          "resume_fee": {
            "$ref": "#/definitions/Uint128"
          }
        },
        "additionalProperties": false
      },
      "Timestamp": {
        "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
        "allOf": [
          {
            "$ref": "#/definitions/Uint64"
          }
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "description": "Rebalancer execute msgs.",
    "oneOf": [
      {
        "type": "string",
        "enum": ["approve_admin_change"]
      },
      {
        "type": "object",
        "required": ["admin"],
        "properties": {
          "admin": {
            "$ref": "#/definitions/RebalancerAdminMsg"
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": ["system_rebalance"],
        "properties": {
          "system_rebalance": {
            "type": "object",
            "properties": {
              "limit": {
                "type": ["integer", "null"],
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Register this account to the service.",
        "type": "object",
        "required": ["register"],
        "properties": {
          "register": {
            "type": "object",
            "required": ["register_for"],
            "properties": {
              "data": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/RebalancerData"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "register_for": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Deregister the account from the services",
        "type": "object",
        "required": ["deregister"],
        "properties": {
          "deregister": {
            "type": "object",
            "required": ["deregister_for"],
            "properties": {
              "deregister_for": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Update the config of the service for the account",
        "type": "object",
        "required": ["update"],
        "properties": {
          "update": {
            "type": "object",
            "required": ["data", "update_for"],
            "properties": {
              "data": {
                "$ref": "#/definitions/RebalancerUpdateData"
              },
              "update_for": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Pause the service",
        "type": "object",
        "required": ["pause"],
        "properties": {
          "pause": {
            "type": "object",
            "required": ["pause_for", "sender"],
            "properties": {
              "pause_for": {
                "type": "string"
              },
              "reason": {
                "type": ["string", "null"]
              },
              "sender": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Resume the service",
        "type": "object",
        "required": ["resume"],
        "properties": {
          "resume": {
            "type": "object",
            "required": ["resume_for", "sender"],
            "properties": {
              "resume_for": {
                "type": "string"
              },
              "sender": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      },
      "BaseDenom": {
        "type": "object",
        "required": ["denom", "min_balance_limit"],
        "properties": {
          "denom": {
            "type": "string"
          },
          "min_balance_limit": {
            "$ref": "#/definitions/Uint128"
          }
        },
        "additionalProperties": false
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "Expiration": {
        "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
        "oneOf": [
          {
            "description": "AtHeight will expire when `env.block.height` >= height",
            "type": "object",
            "required": ["at_height"],
            "properties": {
              "at_height": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          },
          {
            "description": "AtTime will expire when `env.block.time` >= time",
            "type": "object",
            "required": ["at_time"],
            "properties": {
              "at_time": {
                "$ref": "#/definitions/Timestamp"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Never will never expire. Used to express the empty variant",
            "type": "object",
            "required": ["never"],
            "properties": {
              "never": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "OptionalField_for_String": {
        "description": "An optional helper for Option, for when we need to update an optional field in storage. Ex: We want to update an optional field in storage: `sample: Option<String>` but we also want to have it optional on the update message: `sample: Option<OptionalField<String>>`\n\nThis allows us to have 3 options: 1. None: Do nothing, keep storage as is. 2. Some(OptionalField::Clear): Clear the field in storage and set it to None. 3. Some(OptionalField::Set(value)): Set the field in storage to Some(value)",
        "oneOf": [
          {
            "type": "string",
            "enum": ["clear"]
          },
          {
            "type": "object",
            "required": ["set"],
            "properties": {
              "set": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "OptionalField_for_uint64": {
        "description": "An optional helper for Option, for when we need to update an optional field in storage. Ex: We want to update an optional field in storage: `sample: Option<String>` but we also want to have it optional on the update message: `sample: Option<OptionalField<String>>`\n\nThis allows us to have 3 options: 1. None: Do nothing, keep storage as is. 2. Some(OptionalField::Clear): Clear the field in storage and set it to None. 3. Some(OptionalField::Set(value)): Set the field in storage to Some(value)",
        "oneOf": [
          {
            "type": "string",
            "enum": ["clear"]
          },
          {
            "type": "object",
            "required": ["set"],
            "properties": {
              "set": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "PID": {
        "description": "The PID parameters we use to calculate the rebalance amounts",
        "type": "object",
        "required": ["d", "i", "p"],
        "properties": {
          "d": {
            "type": "string"
          },
          "i": {
            "type": "string"
          },
          "p": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Pair": {
        "type": "array",
        "items": [
          {
            "type": "string"
          },
          {
            "type": "string"
          }
        ],
        "maxItems": 2,
        "minItems": 2
      },
      "RebalancerAdminMsg": {
        "oneOf": [
          {
            "type": "string",
            "enum": ["cancel_admin_change"]
          },
          {
            "type": "object",
            "required": ["update_system_status"],
            "properties": {
              "update_system_status": {
                "type": "object",
                "required": ["status"],
                "properties": {
                  "status": {
                    "$ref": "#/definitions/SystemRebalanceStatus"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": ["update_denom_whitelist"],
            "properties": {
              "update_denom_whitelist": {
                "type": "object",
                "required": ["to_add", "to_remove"],
                "properties": {
                  "to_add": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "to_remove": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": ["update_base_denom_whitelist"],
            "properties": {
              "update_base_denom_whitelist": {
                "type": "object",
                "required": ["to_add", "to_remove"],
                "properties": {
                  "to_add": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/BaseDenom"
                    }
                  },
                  "to_remove": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": ["update_services_manager"],
            "properties": {
              "update_services_manager": {
                "type": "object",
                "required": ["addr"],
                "properties": {
                  "addr": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": ["update_auctions_manager"],
            "properties": {
              "update_auctions_manager": {
                "type": "object",
                "required": ["addr"],
                "properties": {
                  "addr": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": ["update_cycle_period"],
            "properties": {
              "update_cycle_period": {
                "type": "object",
                "required": ["period"],
                "properties": {
                  "period": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": ["update_fees"],
            "properties": {
              "update_fees": {
                "type": "object",
                "required": ["fees"],
                "properties": {
                  "fees": {
                    "$ref": "#/definitions/ServiceFeeConfig"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": ["start_admin_change"],
            "properties": {
              "start_admin_change": {
                "type": "object",
                "required": ["addr", "expiration"],
                "properties": {
                  "addr": {
                    "type": "string"
                  },
                  "expiration": {
                    "$ref": "#/definitions/Expiration"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "RebalancerData": {
        "type": "object",
        "required": [
          "base_denom",
          "pid",
          "target_override_strategy",
          "targets"
        ],
        "properties": {
          "base_denom": {
            "description": "Base denom we will be calculating everything based on",
            "type": "string"
          },
          "max_limit_bps": {
            "description": "The max limit in percentage the rebalancer is allowed to sell in cycle",
            "type": ["integer", "null"],
            "format": "uint64",
            "minimum": 0.0
          },
          "pid": {
            "description": "PID parameters the account want to calculate the rebalance with",
            "allOf": [
              {
                "$ref": "#/definitions/PID"
              }
            ]
          },
          "target_override_strategy": {
            "description": "The strategy to use when overriding targets",
            "allOf": [
              {
                "$ref": "#/definitions/TargetOverrideStrategy"
              }
            ]
          },
          "targets": {
            "description": "List of targets to rebalance for this account",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Target"
            },
            "uniqueItems": true
          },
          "trustee": {
            "description": "The trustee address that can pause/resume the service",
            "type": ["string", "null"]
          }
        },
        "additionalProperties": false
      },
      "RebalancerUpdateData": {
        "type": "object",
        "required": ["targets"],
        "properties": {
          "base_denom": {
            "type": ["string", "null"]
          },
          "max_limit_bps": {
            "anyOf": [
              {
                "$ref": "#/definitions/OptionalField_for_uint64"
              },
              {
                "type": "null"
              }
            ]
          },
          "pid": {
            "anyOf": [
              {
                "$ref": "#/definitions/PID"
              },
              {
                "type": "null"
              }
            ]
          },
          "target_override_strategy": {
            "anyOf": [
              {
                "$ref": "#/definitions/TargetOverrideStrategy"
              },
              {
                "type": "null"
              }
            ]
          },
          "targets": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Target"
            },
            "uniqueItems": true
          },
          "trustee": {
            "anyOf": [
              {
                "$ref": "#/definitions/OptionalField_for_String"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "ServiceFeeConfig": {
        "type": "object",
        "required": ["denom", "register_fee", "resume_fee"],
        "properties": {
          "denom": {
            "type": "string"
          },
          "register_fee": {
            "$ref": "#/definitions/Uint128"
          },
          "resume_fee": {
            "$ref": "#/definitions/Uint128"
          }
        },
        "additionalProperties": false
      },
      "SystemRebalanceStatus": {
        "oneOf": [
          {
            "type": "object",
            "required": ["not_started"],
            "properties": {
              "not_started": {
                "type": "object",
                "required": ["cycle_start"],
                "properties": {
                  "cycle_start": {
                    "$ref": "#/definitions/Timestamp"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": ["processing"],
            "properties": {
              "processing": {
                "type": "object",
                "required": ["cycle_started", "prices", "start_from"],
                "properties": {
                  "cycle_started": {
                    "$ref": "#/definitions/Timestamp"
                  },
                  "prices": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": [
                        {
                          "$ref": "#/definitions/Pair"
                        },
                        {
                          "$ref": "#/definitions/Decimal"
                        }
                      ],
                      "maxItems": 2,
                      "minItems": 2
                    }
                  },
                  "start_from": {
                    "$ref": "#/definitions/Addr"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": ["finished"],
            "properties": {
              "finished": {
                "type": "object",
                "required": ["next_cycle"],
                "properties": {
                  "next_cycle": {
                    "$ref": "#/definitions/Timestamp"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Target": {
        "description": "The target struct that holds all info about a single denom target",
        "type": "object",
        "required": ["bps", "denom"],
        "properties": {
          "bps": {
            "description": "The percentage of the total balance we want to have in this denom",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "denom": {
            "description": "The name of the denom",
            "type": "string"
          },
          "min_balance": {
            "description": "The minimum balance the account should hold for this denom. Can only be a single one for an account",
            "anyOf": [
              {
                "$ref": "#/definitions/Uint128"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "TargetOverrideStrategy": {
        "description": "The strategy we will use when overriding targets",
        "type": "string",
        "enum": ["proportional", "priority"]
      },
      "Timestamp": {
        "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
        "allOf": [
          {
            "$ref": "#/definitions/Uint64"
          }
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "string",
        "enum": [
          "get_system_status",
          "get_white_lists",
          "get_managers_addrs",
          "get_admin"
        ]
      },
      {
        "type": "object",
        "required": ["get_config"],
        "properties": {
          "get_config": {
            "type": "object",
            "required": ["addr"],
            "properties": {
              "addr": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": ["get_all_configs"],
        "properties": {
          "get_all_configs": {
            "type": "object",
            "properties": {
              "limit": {
                "type": ["integer", "null"],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "type": ["string", "null"]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": ["get_paused_config"],
        "properties": {
          "get_paused_config": {
            "type": "object",
            "required": ["addr"],
            "properties": {
              "addr": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Get the service fee of a service",
        "type": "object",
        "required": ["get_service_fee"],
        "properties": {
          "get_service_fee": {
            "type": "object",
            "required": ["account", "action"],
            "properties": {
              "account": {
                "type": "string"
              },
              "action": {
                "$ref": "#/definitions/QueryFeeAction"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "QueryFeeAction": {
        "type": "string",
        "enum": ["register", "resume"]
      }
    }
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "get_admin": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Addr",
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "get_all_configs": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_Tuple_of_Addr_and_RebalancerConfig",
      "type": "array",
      "items": {
        "type": "array",
        "items": [
          {
            "$ref": "#/definitions/Addr"
          },
          {
            "$ref": "#/definitions/RebalancerConfig"
          }
        ],
        "maxItems": 2,
        "minItems": 2
      },
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "ParsedPID": {
          "type": "object",
          "required": ["d", "i", "p"],
          "properties": {
            "d": {
              "$ref": "#/definitions/SignedDecimal"
            },
            "i": {
              "$ref": "#/definitions/SignedDecimal"
            },
            "p": {
              "$ref": "#/definitions/SignedDecimal"
            }
          },
          "additionalProperties": false
        },
        "ParsedTarget": {
          "description": "A parsed target struct that contains all info about a single denom target",
          "type": "object",
          "required": ["denom", "last_i", "percentage"],
          "properties": {
            "denom": {
              "description": "The name of the denom",
              "type": "string"
            },
            "last_i": {
              "description": "The last I value we got from the last rebalance PID calculation.",
              "allOf": [
                {
                  "$ref": "#/definitions/SignedDecimal"
                }
              ]
            },
            "last_input": {
              "description": "The input we got from the last rebalance.",
              "anyOf": [
                {
                  "$ref": "#/definitions/SignedDecimal"
                },
                {
                  "type": "null"
                }
              ]
            },
            "min_balance": {
              "description": "The minimum balance the account should hold for this denom. Can only be a single one for an account",
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "percentage": {
              "description": "The percentage of the total balance we want to have in this denom",
              "allOf": [
                {
                  "$ref": "#/definitions/Decimal"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "RebalancerConfig": {
          "type": "object",
          "required": [
            "base_denom",
            "has_min_balance",
            "last_rebalance",
            "max_limit",
            "pid",
            "target_override_strategy",
            "targets"
          ],
          "properties": {
            "base_denom": {
              "description": "The base denom we will be calculating everything based on",
              "type": "string"
            },
            "has_min_balance": {
              "type": "boolean"
            },
            "last_rebalance": {
              "description": "When the last rebalance happened.",
              "allOf": [
                {
                  "$ref": "#/definitions/Timestamp"
                }
              ]
            },
            "max_limit": {
              "description": "Percentage from the total balance that we are allowed to sell in 1 rebalance cycle.",
              "allOf": [
                {
                  "$ref": "#/definitions/Decimal"
                }
              ]
            },
            "pid": {
              "description": "The PID parameters the account want to rebalance with",
              "allOf": [
                {
                  "$ref": "#/definitions/ParsedPID"
                }
              ]
            },
            "target_override_strategy": {
              "$ref": "#/definitions/TargetOverrideStrategy"
            },
            "targets": {
              "description": "A vector of targets to rebalance for this account",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ParsedTarget"
              }
            },
            "trustee": {
              "description": "the address that can pause and resume the service",
              "anyOf": [
                {
                  "$ref": "#/definitions/Addr"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "SignedDecimal": {
          "description": "A signed fixed-point decimal value with 18 fractional digits, i.e. SignedDecimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 170141183460469231731.687303715884105727 (which is (2^127 - 1) / 10^18) and the smallest is -170141183460469231731.687303715884105728 (which is -2^127 / 10^18).",
          "type": "string"
        },
        "TargetOverrideStrategy": {
          "description": "The strategy we will use when overriding targets",
          "type": "string",
          "enum": ["proportional", "priority"]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "get_config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "RebalancerConfig",
      "type": "object",
      "required": [
        "base_denom",
        "has_min_balance",
        "last_rebalance",
        "max_limit",
        "pid",
        "target_override_strategy",
        "targets"
      ],
      "properties": {
        "base_denom": {
          "description": "The base denom we will be calculating everything based on",
          "type": "string"
        },
        "has_min_balance": {
          "type": "boolean"
        },
        "last_rebalance": {
          "description": "When the last rebalance happened.",
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            }
          ]
        },
        "max_limit": {
          "description": "Percentage from the total balance that we are allowed to sell in 1 rebalance cycle.",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "pid": {
          "description": "The PID parameters the account want to rebalance with",
          "allOf": [
            {
              "$ref": "#/definitions/ParsedPID"
            }
          ]
        },
        "target_override_strategy": {
          "$ref": "#/definitions/TargetOverrideStrategy"
        },
        "targets": {
          "description": "A vector of targets to rebalance for this account",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ParsedTarget"
          }
        },
        "trustee": {
          "description": "the address that can pause and resume the service",
          "anyOf": [
            {
              "$ref": "#/definitions/Addr"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "ParsedPID": {
          "type": "object",
          "required": ["d", "i", "p"],
          "properties": {
            "d": {
              "$ref": "#/definitions/SignedDecimal"
            },
            "i": {
              "$ref": "#/definitions/SignedDecimal"
            },
            "p": {
              "$ref": "#/definitions/SignedDecimal"
            }
          },
          "additionalProperties": false
        },
        "ParsedTarget": {
          "description": "A parsed target struct that contains all info about a single denom target",
          "type": "object",
          "required": ["denom", "last_i", "percentage"],
          "properties": {
            "denom": {
              "description": "The name of the denom",
              "type": "string"
            },
            "last_i": {
              "description": "The last I value we got from the last rebalance PID calculation.",
              "allOf": [
                {
                  "$ref": "#/definitions/SignedDecimal"
                }
              ]
            },
            "last_input": {
              "description": "The input we got from the last rebalance.",
              "anyOf": [
                {
                  "$ref": "#/definitions/SignedDecimal"
                },
                {
                  "type": "null"
                }
              ]
            },
            "min_balance": {
              "description": "The minimum balance the account should hold for this denom. Can only be a single one for an account",
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "percentage": {
              "description": "The percentage of the total balance we want to have in this denom",
              "allOf": [
                {
                  "$ref": "#/definitions/Decimal"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "SignedDecimal": {
          "description": "A signed fixed-point decimal value with 18 fractional digits, i.e. SignedDecimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 170141183460469231731.687303715884105727 (which is (2^127 - 1) / 10^18) and the smallest is -170141183460469231731.687303715884105728 (which is -2^127 / 10^18).",
          "type": "string"
        },
        "TargetOverrideStrategy": {
          "description": "The strategy we will use when overriding targets",
          "type": "string",
          "enum": ["proportional", "priority"]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "get_managers_addrs": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ManagersAddrsResponse",
      "type": "object",
      "required": ["auctions", "services"],
      "properties": {
        "auctions": {
          "$ref": "#/definitions/Addr"
        },
        "services": {
          "$ref": "#/definitions/Addr"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        }
      }
    },
    "get_paused_config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "PauseData",
      "type": "object",
      "required": ["config", "pauser", "reason"],
      "properties": {
        "config": {
          "$ref": "#/definitions/RebalancerConfig"
        },
        "pauser": {
          "$ref": "#/definitions/Addr"
        },
        "reason": {
          "$ref": "#/definitions/PauseReason"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "ParsedPID": {
          "type": "object",
          "required": ["d", "i", "p"],
          "properties": {
            "d": {
              "$ref": "#/definitions/SignedDecimal"
            },
            "i": {
              "$ref": "#/definitions/SignedDecimal"
            },
            "p": {
              "$ref": "#/definitions/SignedDecimal"
            }
          },
          "additionalProperties": false
        },
        "ParsedTarget": {
          "description": "A parsed target struct that contains all info about a single denom target",
          "type": "object",
          "required": ["denom", "last_i", "percentage"],
          "properties": {
            "denom": {
              "description": "The name of the denom",
              "type": "string"
            },
            "last_i": {
              "description": "The last I value we got from the last rebalance PID calculation.",
              "allOf": [
                {
                  "$ref": "#/definitions/SignedDecimal"
                }
              ]
            },
            "last_input": {
              "description": "The input we got from the last rebalance.",
              "anyOf": [
                {
                  "$ref": "#/definitions/SignedDecimal"
                },
                {
                  "type": "null"
                }
              ]
            },
            "min_balance": {
              "description": "The minimum balance the account should hold for this denom. Can only be a single one for an account",
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "percentage": {
              "description": "The percentage of the total balance we want to have in this denom",
              "allOf": [
                {
                  "$ref": "#/definitions/Decimal"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "PauseReason": {
          "oneOf": [
            {
              "description": "This reason can only be called if the rebalancer is pausing the account because it has an empty balance.",
              "type": "string",
              "enum": ["empty_balance"]
            },
            {
              "type": "object",
              "required": ["not_whitelisted_account_code_id"],
              "properties": {
                "not_whitelisted_account_code_id": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            },
            {
              "description": "This reason is given by the user/account, he might forget why he paused the account this will remind him of it.",
              "type": "object",
              "required": ["account_reason"],
              "properties": {
                "account_reason": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "RebalancerConfig": {
          "type": "object",
          "required": [
            "base_denom",
            "has_min_balance",
            "last_rebalance",
            "max_limit",
            "pid",
            "target_override_strategy",
            "targets"
          ],
          "properties": {
            "base_denom": {
              "description": "The base denom we will be calculating everything based on",
              "type": "string"
            },
            "has_min_balance": {
              "type": "boolean"
            },
            "last_rebalance": {
              "description": "When the last rebalance happened.",
              "allOf": [
                {
                  "$ref": "#/definitions/Timestamp"
                }
              ]
            },
            "max_limit": {
              "description": "Percentage from the total balance that we are allowed to sell in 1 rebalance cycle.",
              "allOf": [
                {
                  "$ref": "#/definitions/Decimal"
                }
              ]
            },
            "pid": {
              "description": "The PID parameters the account want to rebalance with",
              "allOf": [
                {
                  "$ref": "#/definitions/ParsedPID"
                }
              ]
            },
            "target_override_strategy": {
              "$ref": "#/definitions/TargetOverrideStrategy"
            },
            "targets": {
              "description": "A vector of targets to rebalance for this account",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ParsedTarget"
              }
            },
            "trustee": {
              "description": "the address that can pause and resume the service",
              "anyOf": [
                {
                  "$ref": "#/definitions/Addr"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "SignedDecimal": {
          "description": "A signed fixed-point decimal value with 18 fractional digits, i.e. SignedDecimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 170141183460469231731.687303715884105727 (which is (2^127 - 1) / 10^18) and the smallest is -170141183460469231731.687303715884105728 (which is -2^127 / 10^18).",
          "type": "string"
        },
        "TargetOverrideStrategy": {
          "description": "The strategy we will use when overriding targets",
          "type": "string",
          "enum": ["proportional", "priority"]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "get_service_fee": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Nullable_Coin",
      "anyOf": [
        {
          "$ref": "#/definitions/Coin"
        },
        {
          "type": "null"
        }
      ],
      "definitions": {
        "Coin": {
          "type": "object",
          "required": ["amount", "denom"],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "get_system_status": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "SystemRebalanceStatus",
      "oneOf": [
        {
          "type": "object",
          "required": ["not_started"],
          "properties": {
            "not_started": {
              "type": "object",
              "required": ["cycle_start"],
              "properties": {
                "cycle_start": {
                  "$ref": "#/definitions/Timestamp"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": ["processing"],
          "properties": {
            "processing": {
              "type": "object",
              "required": ["cycle_started", "prices", "start_from"],
              "properties": {
                "cycle_started": {
                  "$ref": "#/definitions/Timestamp"
                },
                "prices": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": [
                      {
                        "$ref": "#/definitions/Pair"
                      },
                      {
                        "$ref": "#/definitions/Decimal"
                      }
                    ],
                    "maxItems": 2,
                    "minItems": 2
                  }
                },
                "start_from": {
                  "$ref": "#/definitions/Addr"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": ["finished"],
          "properties": {
            "finished": {
              "type": "object",
              "required": ["next_cycle"],
              "properties": {
                "next_cycle": {
                  "$ref": "#/definitions/Timestamp"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ],
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "Pair": {
          "type": "array",
          "items": [
            {
              "type": "string"
            },
            {
              "type": "string"
            }
          ],
          "maxItems": 2,
          "minItems": 2
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "get_white_lists": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "WhitelistsResponse",
      "type": "object",
      "required": ["base_denom_whitelist", "denom_whitelist"],
      "properties": {
        "base_denom_whitelist": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BaseDenom"
          },
          "uniqueItems": true
        },
        "denom_whitelist": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "uniqueItems": true
        }
      },
      "additionalProperties": false,
      "definitions": {
        "BaseDenom": {
          "type": "object",
          "required": ["denom", "min_balance_limit"],
          "properties": {
            "denom": {
              "type": "string"
            },
            "min_balance_limit": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}
